ANÁLISE COMPLETA - MIGRAÇÃO SISTEMA GESTÃO MUNICIPAL PARA SUPABASE
================================================================================

RESUMO EXECUTIVO
================================================================================
O Sistema de Gestão Municipal é uma aplicação Next.js complexa com 13 entidades, 
formulários avançados (funcionário com 70+ campos), dashboard interativo e 
sistema de logs. Atualmente usa localStorage e está preparado para migração 
para Supabase com PostgreSQL, implementando multi-tenancy e autenticação robusta.

ESTRUTURA ATUAL DO PROJETO
================================================================================

ARQUITETURA FRONTEND
--------------------------------------------------------------------------------
• Framework: Next.js 15.2.4 com App Router
• Linguagem: TypeScript com tipagem estrita
• UI Framework: Tailwind CSS + shadcn/ui (componentes Radix UI)
• Estado: Context API + hooks customizados
• Validação: Zod + React Hook Form
• Gráficos: Chart.js + react-chartjs-2
• Autenticação: Sistema customizado com localStorage/sessionStorage
• Criptografia: PBKDF2 + salt para senhas

ESTRUTURA DE DADOS ATUAL (13 ENTIDADES)
--------------------------------------------------------------------------------
1. Users (usuários regulares do sistema)
2. AdminUsers (usuários administrativos com senha criptografada)
3. Vehicles (veículos básicos - placa, modelo, marca, ano)
4. VeiculosRegistrados (veículos detalhados com fotos e documentos)
5. Brands (marcas de veículos)
6. Departments (departamentos/secretarias municipais)
7. Employees (funcionários - modelo complexo com 70+ campos)
8. FuelRecords (registros básicos de combustível)
9. FuelTypes (tipos de combustível com preços)
10. Abastecimentos (abastecimentos detalhados com posto e secretaria)
11. Combustiveis (contratos de combustível com limites)
12. Rotas (rotas de viagem com distâncias)
13. Destinos (destinos com compatibilidade de veículos)
14. LogEntry (logs de sistema para auditoria)

COMPONENTES CRÍTICOS IDENTIFICADOS
--------------------------------------------------------------------------------
• StorageService: 1.604 linhas - centraliza toda persistência
• novo-funcionario-form.tsx: 1.495 linhas - formulário mais complexo
• Dashboard: métricas em tempo real com gráficos
• Sistema de logs: rastreamento completo de ações
• Autenticação: sessões com expiração e renovação

PONTOS FORTES DO PROJETO ATUAL
================================================================================
✅ Separação clara de responsabilidades (models, services, repositories)
✅ Tipagem TypeScript rigorosa em todas as camadas
✅ Sistema de criptografia de senhas implementado
✅ Interface responsiva e acessível
✅ Sistema de logs para auditoria
✅ Hooks customizados para gerenciamento de estado
✅ Validação robusta com Zod
✅ Design system consistente com shadcn/ui
✅ Abstração preparada para migração (storage-config.ts)

PONTOS CRÍTICOS A RESOLVER
================================================================================
❌ Dependência total do localStorage (dados perdidos ao limpar browser)
❌ StorageService monolítico (1.604 linhas em um arquivo)
❌ Autenticação hardcoded ainda ativa (admin/admin)
❌ Sem sincronização entre dispositivos/sessões
❌ Sem backup automático dos dados
❌ Sem multi-tenancy real (preparado mas não implementado)
❌ Sem validação server-side
❌ Tokens JWT não implementados
❌ Exportação PDF não funcional
❌ Sem API backend

ESPECIFICAÇÕES TÉCNICAS PARA SUPABASE
================================================================================

CONFIGURAÇÃO INICIAL
--------------------------------------------------------------------------------
Dependências necessárias:
```json
{
  "@supabase/supabase-js": "^2.39.0",
  "@supabase/auth-helpers-nextjs": "^0.8.7",
  "@supabase/auth-helpers-react": "^0.4.2",
  "@supabase/ssr": "^0.0.10"
}
```

Variáveis de ambiente (.env.local):
```
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key
NEXT_PUBLIC_SITE_URL=http://localhost:3000
```

SCHEMA DO BANCO DE DADOS POSTGRESQL
--------------------------------------------------------------------------------

Tabela: organizations (multi-tenancy)
```sql
CREATE TABLE organizations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  slug VARCHAR(100) UNIQUE NOT NULL,
  cnpj VARCHAR(18),
  phone VARCHAR(20),
  email VARCHAR(255),
  address JSONB,
  settings JSONB DEFAULT '{}',
  active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

Tabela: profiles (usuários integrados com Supabase Auth)
```sql
CREATE TABLE profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  role VARCHAR(50) NOT NULL DEFAULT 'user',
  permissions JSONB DEFAULT '[]',
  last_login TIMESTAMPTZ,
  active BOOLEAN DEFAULT true,
  metadata JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

Tabela: departments
```sql
CREATE TABLE departments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
  name VARCHAR(255) NOT NULL,
  manager VARCHAR(255),
  budget DECIMAL(15,2),
  cost_center VARCHAR(50),
  description TEXT,
  active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

Tabela: employees (estrutura complexa - 70+ campos)
```sql
CREATE TABLE employees (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
  department_id UUID REFERENCES departments(id),
  
  -- Dados pessoais básicos
  nome VARCHAR(255) NOT NULL,
  email VARCHAR(255),
  telefone VARCHAR(20),
  celular VARCHAR(20),
  nascimento DATE NOT NULL,
  
  -- Documentos principais
  cpf VARCHAR(14) NOT NULL,
  rg VARCHAR(20),
  cnh VARCHAR(20),
  categoria_cnh VARCHAR(5),
  data_expedicao_cnh DATE,
  data_validade_cnh DATE,
  
  -- Endereço completo
  logradouro VARCHAR(255) NOT NULL,
  numero VARCHAR(10),
  complemento VARCHAR(100),
  bairro VARCHAR(100) NOT NULL,
  cep VARCHAR(10) NOT NULL,
  estado VARCHAR(2) NOT NULL,
  
  -- Dados profissionais
  cargo VARCHAR(255) NOT NULL,
  vinculo VARCHAR(50) NOT NULL,
  data_admissao DATE,
  matricula VARCHAR(50),
  salario DECIMAL(10,2),
  
  -- Dados bancários
  banco VARCHAR(5),
  agencia VARCHAR(10),
  conta VARCHAR(20),
  tipo_conta VARCHAR(20),
  
  -- Dados sociais
  nacionalidade VARCHAR(50),
  nome_mae VARCHAR(255),
  nome_pai VARCHAR(255),
  cor_raca VARCHAR(30),
  sexo VARCHAR(20),
  estado_civil VARCHAR(30),
  grau_instrucao VARCHAR(50),
  
  -- Metadados
  dados_completos JSONB DEFAULT '{}',
  foto_url TEXT,
  documentos JSONB DEFAULT '[]',
  ativo BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

Tabela: vehicles
```sql
CREATE TABLE vehicles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
  department_id UUID REFERENCES departments(id),
  
  -- Dados básicos
  plate VARCHAR(10) NOT NULL,
  brand VARCHAR(100) NOT NULL,
  model VARCHAR(100) NOT NULL,
  year INTEGER NOT NULL,
  color VARCHAR(50),
  
  -- Dados técnicos
  chassis VARCHAR(50),
  renavam VARCHAR(20),
  fuel_type VARCHAR(30),
  engine_capacity DECIMAL(3,1),
  tank_capacity INTEGER,
  
  -- Status e documentação
  status VARCHAR(30) DEFAULT 'active',
  odometer INTEGER DEFAULT 0,
  acquisition_date DATE,
  acquisition_value DECIMAL(12,2),
  
  -- Documentos e seguros
  insurance_company VARCHAR(100),
  insurance_policy VARCHAR(50),
  insurance_expiry DATE,
  licensing_expiry DATE,
  
  -- Metadados
  photos JSONB DEFAULT '[]',
  documents JSONB DEFAULT '[]',
  maintenance_history JSONB DEFAULT '[]',
  
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

Tabela: fuel_types
```sql
CREATE TABLE fuel_types (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
  name VARCHAR(50) NOT NULL,
  code VARCHAR(10),
  current_price DECIMAL(6,3) NOT NULL,
  price_history JSONB DEFAULT '[]',
  supplier VARCHAR(100),
  active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

Tabela: fuel_records
```sql
CREATE TABLE fuel_records (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
  vehicle_id UUID REFERENCES vehicles(id) ON DELETE CASCADE,
  fuel_type_id UUID REFERENCES fuel_types(id),
  employee_id UUID REFERENCES employees(id),
  
  -- Dados do abastecimento
  date DATE NOT NULL,
  time TIME,
  amount DECIMAL(8,3) NOT NULL,
  price_per_liter DECIMAL(6,3) NOT NULL,
  total_cost DECIMAL(10,2) NOT NULL,
  
  -- Dados do veículo
  odometer_before INTEGER,
  odometer_after INTEGER,
  fuel_level_before VARCHAR(20),
  fuel_level_after VARCHAR(20),
  
  -- Local e responsável
  station_name VARCHAR(255),
  station_address TEXT,
  authorized_by UUID REFERENCES profiles(id),
  
  -- Documentação
  receipt_number VARCHAR(50),
  receipt_photo TEXT,
  notes TEXT,
  
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

Tabela: routes
```sql
CREATE TABLE routes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
  name VARCHAR(255) NOT NULL,
  origin VARCHAR(255),
  destination VARCHAR(255),
  distance_km DECIMAL(8,2),
  estimated_time INTEGER, -- em minutos
  route_type VARCHAR(50),
  coordinates JSONB,
  active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

Tabela: destinations
```sql
CREATE TABLE destinations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
  name VARCHAR(255) NOT NULL,
  address TEXT,
  distance_from_base DECIMAL(8,2),
  
  -- Compatibilidade de veículos
  vehicle_compatibility JSONB DEFAULT '{
    "ambulancia": false,
    "cadeirante": false,
    "caminhao": false,
    "carro": false,
    "moto": false,
    "onibus": false,
    "van": false,
    "outro": false
  }',
  
  coordinates JSONB,
  active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

Tabela: system_logs
```sql
CREATE TABLE system_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  organization_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
  user_id UUID REFERENCES profiles(id) ON DELETE SET NULL,
  
  -- Dados da ação
  action VARCHAR(100) NOT NULL,
  entity_type VARCHAR(50),
  entity_id UUID,
  old_values JSONB,
  new_values JSONB,
  
  -- Contexto técnico
  ip_address INET,
  user_agent TEXT,
  session_id VARCHAR(255),
  request_id VARCHAR(255),
  
  -- Metadados
  severity VARCHAR(20) DEFAULT 'info',
  category VARCHAR(50),
  details JSONB DEFAULT '{}',
  
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

POLÍTICAS RLS (ROW LEVEL SECURITY)
--------------------------------------------------------------------------------
```sql
-- Habilitar RLS em todas as tabelas
ALTER TABLE organizations ENABLE ROW LEVEL SECURITY;
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE departments ENABLE ROW LEVEL SECURITY;
ALTER TABLE employees ENABLE ROW LEVEL SECURITY;
ALTER TABLE vehicles ENABLE ROW LEVEL SECURITY;
ALTER TABLE fuel_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE fuel_records ENABLE ROW LEVEL SECURITY;
ALTER TABLE routes ENABLE ROW LEVEL SECURITY;
ALTER TABLE destinations ENABLE ROW LEVEL SECURITY;
ALTER TABLE system_logs ENABLE ROW LEVEL SECURITY;

-- Função helper para obter organization_id do usuário
CREATE OR REPLACE FUNCTION get_user_organization_id()
RETURNS UUID AS $$
BEGIN
  RETURN (
    SELECT organization_id 
    FROM profiles 
    WHERE id = auth.uid()
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Política universal para isolamento por organização
CREATE POLICY "Organization isolation" ON departments
  FOR ALL USING (organization_id = get_user_organization_id());

-- Replicar para todas as tabelas...
```

ESTRUTURA DE API ROUTES
================================================================================

Estrutura de diretórios app/api/:
```
app/api/
├── auth/
│   ├── callback/route.ts         # Callback OAuth
│   ├── signout/route.ts         # Logout
│   └── refresh/route.ts         # Refresh token
├── organizations/
│   ├── route.ts                 # GET, POST organizations
│   ├── [id]/route.ts           # PUT, DELETE organization
│   └── switch/route.ts         # Trocar organização ativa
├── employees/
│   ├── route.ts                # GET, POST employees
│   ├── [id]/route.ts          # GET, PUT, DELETE employee
│   ├── import/route.ts        # Importar planilha
│   └── export/route.ts        # Exportar relatórios
├── vehicles/
│   ├── route.ts               # CRUD vehicles
│   ├── [id]/route.ts         # Individual vehicle
│   ├── [id]/maintenance/route.ts # Histórico manutenção
│   └── reports/route.ts      # Relatórios de frota
├── fuel/
│   ├── types/route.ts        # Tipos de combustível
│   ├── records/route.ts      # Registros abastecimento
│   ├── contracts/route.ts    # Contratos combustível
│   └── reports/
│       ├── consumption/route.ts  # Relatório consumo
│       ├── costs/route.ts       # Relatório custos
│       └── efficiency/route.ts  # Relatório eficiência
├── departments/
│   ├── route.ts              # CRUD departments
│   └── [id]/route.ts        # Individual department
├── routes/
│   ├── route.ts             # CRUD routes
│   └── destinations/route.ts # CRUD destinations
├── logs/
│   ├── route.ts            # Query logs
│   └── export/route.ts     # Export logs
└── dashboard/
    ├── stats/route.ts      # Estatísticas gerais
    ├── charts/route.ts     # Dados para gráficos
    └── alerts/route.ts     # Alertas do sistema
```

SERVIÇOS DE INTEGRAÇÃO
================================================================================

Cliente Supabase configurado:
```typescript
// lib/supabase/client.ts
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { Database } from './database.types'

export const createClient = () => createClientComponentClient<Database>()

// lib/supabase/server.ts
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { Database } from './database.types'

export const createServerClient = () => 
  createServerComponentClient<Database>({ cookies })
```

Novos serviços API:
```typescript
// lib/services/api/
├── base.service.ts          # Classe base com métodos comuns
├── auth.service.ts          # Autenticação e sessões
├── organization.service.ts  # Multi-tenancy
├── employee.service.ts      # CRUD funcionários
├── vehicle.service.ts       # CRUD veículos
├── fuel.service.ts          # Combustível e abastecimentos
├── department.service.ts    # CRUD departamentos
├── route.service.ts         # Rotas e destinos
├── log.service.ts           # Sistema de logs
├── report.service.ts        # Geração de relatórios
└── sync.service.ts          # Sincronização offline
```

MIGRAÇÃO E TRANSFORMAÇÃO DE DADOS
================================================================================

Script principal de migração:
```typescript
// scripts/migrate-localStorage-to-supabase.ts
export class DataMigration {
  async migrateAll() {
    // 1. Criar organização padrão
    // 2. Migrar usuários administrativos
    // 3. Migrar departamentos
    // 4. Migrar funcionários (transformar estrutura complexa)
    // 5. Migrar veículos e marcas
    // 6. Migrar tipos de combustível
    // 7. Migrar abastecimentos
    // 8. Migrar rotas e destinos
    // 9. Migrar logs (preservar auditoria)
    // 10. Validar integridade dos dados
  }
}
```

COMPONENTES A REFATORAR
================================================================================

Principais arquivos que precisam modificação:

1. lib/storage-service.ts (1.604 linhas)
   → Dividir em serviços específicos
   → Implementar cache local para offline
   → Adicionar validação de dados

2. lib/hooks/useAuth.ts
   → Migrar para Supabase Auth
   → Implementar refresh automático
   → Gerenciar multi-organizações

3. components/auth/private-route.tsx
   → Validar com Supabase session
   → Verificar permissões granulares
   → Implementar loading states

4. app/login/page.tsx
   → Integrar OAuth providers
   → Magic links para recuperação
   → Validação server-side

5. components/novo-funcionario-form.tsx (1.495 linhas)
   → Otimizar performance com useMemo
   → Implementar auto-save
   → Validação em tempo real

6. app/dashboard/page.tsx
   → Conectar com APIs do Supabase
   → Implementar cache inteligente
   → Real-time subscriptions

FUNCIONALIDADES ADICIONAIS NECESSÁRIAS
================================================================================

Sistema de Backup e Sincronização:
```typescript
// lib/services/sync.service.ts
export class SyncService {
  // Backup automático a cada mudança
  // Sincronização bidirecional
  // Resolução automática de conflitos
  // Cache otimizado para offline
  // Compressão de dados
}
```

Geração de Relatórios:
```typescript
// lib/services/reports.service.ts
export class ReportsService {
  // PDFs com jsPDF otimizado
  // Planilhas Excel com exceljs
  // Relatórios personalizáveis
  // Agendamento automático
  // Templates profissionais
  // Assinatura digital
}
```

Sistema de Notificações:
```typescript
// lib/services/notifications.service.ts
export class NotificationService {
  // Notificações em tempo real
  // Email automático
  // Alertas de vencimentos
  // Dashboard de notificações
  // Configurações por usuário
}
```

CONFIGURAÇÕES DE PRODUÇÃO
================================================================================

Otimizações de Performance:
• Connection pooling para PostgreSQL (pgBouncer)
• Redis para cache de sessões e consultas
• CDN para assets estáticos (Vercel/CloudFlare)
• Compressão gzip/brotli
• Lazy loading otimizado
• Service Workers para cache offline

Segurança:
• HTTPS obrigatório com HSTS
• CSP headers configurados
• Rate limiting por IP/usuário
• Sanitização de inputs
• Logs de segurança
• Backup criptografado

Monitoramento:
• Sentry para error tracking
• Vercel Analytics para performance
• Supabase Dashboard para DB metrics
• LogRocket para session replay
• Uptime monitoring

Deploy e CI/CD:
• GitHub Actions para CI/CD
• Testes automatizados
• Deploy preview para PRs
• Rollback automático
• Environment promotion

CRONOGRAMA DE IMPLEMENTAÇÃO
================================================================================

FASE 1: CONFIGURAÇÃO BASE (2-3 semanas)
• Configurar projeto Supabase
• Criar schema completo do banco
• Implementar autenticação básica
• Configurar RLS policies
• Setup do ambiente de desenvolvimento

FASE 2: MIGRAÇÃO DE SERVIÇOS (3-4 semanas)
• Criar APIs de backend
• Refatorar StorageService
• Implementar novos hooks
• Migrar componentes de autenticação
• Testes de integração básicos

FASE 3: MIGRAÇÃO DE DADOS E COMPONENTES (2-3 semanas)
• Script de migração completo
• Refatorar formulários complexos
• Atualizar dashboard e gráficos
• Implementar sistema de logs
• Testes end-to-end

FASE 4: FUNCIONALIDADES AVANÇADAS (1-2 semanas)
• Sistema de relatórios PDF
• Notificações em tempo real
• Backup e sincronização
• Otimizações de performance
• Documentação final

FASE 5: DEPLOY E MONITORAMENTO (1 semana)
• Deploy em produção
• Configuração de monitoramento
• Treinamento de usuários
• Suporte pós-deploy
• Ajustes finais

RISCOS E MITIGAÇÕES
================================================================================

RISCOS TÉCNICOS:
• Complexidade dos formulários (70+ campos)
  → Implementar salvamento incremental
  → Validação otimizada
  → Loading states granulares

• Volume de dados para migração
  → Migração em lotes
  → Validação de integridade
  → Rollback automático

• Performance com múltiplas organizações
  → Índices otimizados
  → Cache inteligente
  → Queries eficientes

RISCOS DE NEGÓCIO:
• Tempo de inatividade durante migração
  → Deploy blue-green
  → Período de manutenção planejado
  → Fallback para localStorage

• Resistência dos usuários
  → Treinamento antecipado
  → Interface familiar
  → Suporte dedicado

• Perda de dados
  → Backup completo antes migração
  → Validação rigorosa
  → Período de transição

================================================================================
MINI-PROMPTS PARA IMPLEMENTAÇÃO
================================================================================

PROMPT 1 - CONFIGURAÇÃO INICIAL SUPABASE:
"Configure um projeto Supabase para o sistema de gestão municipal. Crie o schema PostgreSQL completo com 13 entidades (organizations, profiles, departments, employees com 70+ campos, vehicles, fuel_types, fuel_records, routes, destinations, system_logs). Implemente RLS policies para multi-tenancy. Configure autenticação e variáveis de ambiente para Next.js."

PROMPT 2 - CLIENTE SUPABASE E TYPES:
"Crie os clientes Supabase para Next.js (client-side e server-side) com tipagem TypeScript completa. Gere os types do database automaticamente. Configure middleware para autenticação. Implemente helpers para queries com RLS automático."

PROMPT 3 - MIGRAÇÃO DO STORAGE SERVICE:
"Refatore o StorageService.ts (1604 linhas) dividindo em serviços específicos por entidade (EmployeeService, VehicleService, FuelService, etc.). Mantenha a interface atual mas conecte com Supabase. Implemente cache offline e sincronização automática."

PROMPT 4 - API ROUTES COMPLETAS:
"Crie todas as API routes do Next.js para o sistema: /api/employees, /api/vehicles, /api/fuel, /api/departments, /api/logs, /api/dashboard. Implemente CRUD completo, validação com Zod, autenticação middleware, e tratamento de erros. Inclua endpoints para relatórios e exports."

PROMPT 5 - SISTEMA DE AUTENTICAÇÃO:
"Migre o sistema de autenticação atual para Supabase Auth. Refatore useAuth.ts para usar Supabase session. Atualize PrivateRoute.tsx e login/page.tsx. Implemente multi-tenancy com troca de organização. Mantenha renovação automática de sessão."

PROMPT 6 - FORMULÁRIO DE FUNCIONÁRIO:
"Refatore o novo-funcionario-form.tsx (1495 linhas, 70+ campos) para usar API do Supabase. Otimize performance com useMemo e debounce. Implemente auto-save, validação real-time, e upload de documentos. Mantenha toda funcionalidade atual."

PROMPT 7 - DASHBOARD E GRÁFICOS:
"Atualize o dashboard principal para conectar com Supabase. Implemente real-time subscriptions para métricas. Otimize queries para gráficos de combustível. Configure cache inteligente e loading states. Mantenha todas as visualizações Chart.js existentes."

PROMPT 8 - SCRIPT DE MIGRAÇÃO:
"Crie script completo para migrar dados do localStorage para Supabase. Extraia todas as 13 entidades, transforme estruturas, valide integridade, e execute migração segura. Inclua rollback automático e logs detalhados. Preserve toda auditoria existente."

PROMPT 9 - SISTEMA DE LOGS E AUDITORIA:
"Implemente sistema completo de logs no Supabase. Capture todas as ações CRUD automaticamente. Configure system_logs table com contexto técnico (IP, user-agent). Crie interface para consulta e exportação de logs. Mantenha performance com indexes otimizados."

PROMPT 10 - RELATÓRIOS PDF E EXPORTS:
"Implemente sistema completo de relatórios com jsPDF. Crie templates para: fichas de funcionários, relatórios de frota, consumo de combustível, prestação de contas. Inclua exportação Excel/CSV. Configure API routes para geração server-side."

PROMPT 11 - POLÍTICAS RLS E SEGURANÇA:
"Configure Row Level Security completo para multi-tenancy. Crie policies granulares por tabela e ação (SELECT, INSERT, UPDATE, DELETE). Implemente função helper get_user_organization_id(). Configure roles e permissions. Teste isolamento total entre organizações."

PROMPT 12 - CACHE E PERFORMANCE:
"Implemente sistema de cache inteligente com React Query ou SWR. Configure cache offline com Service Workers. Otimize queries Supabase com indexes. Implemente lazy loading e virtualization para listas grandes. Configure monitoring de performance."

PROMPT 13 - NOTIFICAÇÕES REAL-TIME:
"Implemente sistema de notificações em tempo real com Supabase subscriptions. Crie alerts para: vencimentos de documentos, consumo anômalo, manutenções pendentes. Configure email notifications. Crie dashboard de notificações com filtros."

PROMPT 14 - TESTES E VALIDAÇÃO:
"Crie suite completa de testes: unit tests para services, integration tests para APIs, e2e tests para fluxos críticos. Configure Jest, React Testing Library, e Playwright. Teste multi-tenancy, autenticação, e integridade de dados. Setup CI/CD com GitHub Actions."

PROMPT 15 - DEPLOY E MONITORAMENTO:
"Configure deploy completo em produção com Vercel. Setup Supabase production, configure backups automáticos, monitoring com Sentry, analytics, e alertas. Configure domínio customizado, SSL, e variables de ambiente. Implemente health checks e rollback automático." 